/*
 * Generated By SugarKubes Apr 14 2024
 */

const Monkey = require("../../models/Monkey");
/*
 * @oas [put] /monkey/{id}
 * summary: "update a monkey"
 * tags: ["monkey"]
 * parameters:
 *   - name: 'id'
 *     in: 'path'
 *     description: id of the monkey
 *     schema:
 *       type: 'string'
 *       example: "123456"
 * requestBody:
 *   description: Monkey - **Update** 
 *   required: true
 *   content:
 *     application/json:
 *       schema:
 *        $ref: '#/components/schemas/Monkey'
 * responses:
 *   "200":
 *     description: "update a monkey"
 *     schema:
 *       type: "Monkey"
 */
module.exports = async (req, res) => {
  try {
    const {
      name,
      alive,
      age
    } = req.body;
    const {
      id
    } = req.params;
    const existingMonkey = await Monkey.findOne({
      _id: id
    });
    if (!existingMonkey) throw new Error('monkey not found.');
    // Validation
    // Model Validation 
    if (typeof name !== 'undefined' &&
      typeof name === "string") {
      existingMonkey.name = name;
    }
    if (typeof alive !== 'undefined' &&
      typeof alive === "boolean") {
      existingMonkey.alive = alive;
    }
    if (typeof age !== 'undefined' &&
      typeof age === "number") {
      existingMonkey.age = age;
    }
    // @TODO handle safe area. Should be idempotent.

    // maybe with @sugar-safe-start
    // @sugar-safe-end

    // save
    const updated = await existingMonkey.save();
    return res.json({
      monkey: updated
    });

  } catch (e) {
    console.error('Update => monkey', e);
    return res.status(500).json({
      error: e.message ? e.message : e
    });
  }
};